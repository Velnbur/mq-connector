// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mqconnector "github.com/Velnbur/mq-connector"
	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// Route provides a mock function with given fields: queue, handler, contexters
func (_m *Router) Route(queue mqconnector.Queue, handler mqconnector.Handler, contexters ...mqconnector.ContextFunc) {
	_va := make([]interface{}, len(contexters))
	for _i := range contexters {
		_va[_i] = contexters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, queue, handler)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Run provides a mock function with given fields: ctx
func (_m *Router) Run(ctx context.Context) {
	_m.Called(ctx)
}

type mockConstructorTestingTNewRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouter(t mockConstructorTestingTNewRouter) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
