// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mqconnector "github.com/Velnbur/mq-connector"
	mock "github.com/stretchr/testify/mock"
)

// RpcServer is an autogenerated mock type for the RpcServer type
type RpcServer struct {
	mock.Mock
}

// Client provides a mock function with given fields:
func (_m *RpcServer) Client() mqconnector.RpcClient {
	ret := _m.Called()

	var r0 mqconnector.RpcClient
	if rf, ok := ret.Get(0).(func() mqconnector.RpcClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqconnector.RpcClient)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *RpcServer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *RpcServer) Run(ctx context.Context) {
	_m.Called(ctx)
}

type mockConstructorTestingTNewRpcServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRpcServer creates a new instance of RpcServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRpcServer(t mockConstructorTestingTNewRpcServer) *RpcServer {
	mock := &RpcServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
